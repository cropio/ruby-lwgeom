require 'test/unit'
require 'lwgeom'

module LwGeom
  class TestShperoid < Test::Unit::TestCase
    
    def test_area
      area = 691935.6634448979
      
      # from wkt
      poly_str = "MULTIPOLYGON (((35.6378342974275 50.0627561477932, 35.641005654869 50.0612673341066, 35.6438859138614 50.0600897169689, 35.6446435074591 50.0596835888182, 35.64483351405 50.0594679728166, 35.6446912077083 50.0592168510683, 35.6442599523079 50.05886744947, 35.6429227318955 50.0581216639028, 35.638186949477 50.0573510130077, 35.6371712051975 50.0567380805021, 35.6366255389476 50.0566115115201, 35.6351000592702 50.0574802924114, 35.6351000990451 50.0576884674204, 35.6354704614072 50.058083889932, 35.635412358134 50.0582421780167, 35.6341239534557 50.0588715173282, 35.6338592426068 50.0590905930305, 35.6334293320594 50.0591928899424, 35.6331384262339 50.0594789053857, 35.6327234184938 50.0595372080255, 35.6318985343053 50.0599397188457, 35.6317311828407 50.059815004073, 35.6315214452754 50.0598137590184, 35.630586714096 50.0603092692722, 35.630353808532 50.0602367806266, 35.6301276706515 50.0599375376721, 35.6299444793648 50.0598939001477, 35.6270477049031 50.0613023995205, 35.6270168412796 50.06147261412, 35.6271684354815 50.0617511077413, 35.6277317468411 50.0621930720377, 35.6282132761064 50.0627028831381, 35.6262220584859 50.0634924557068, 35.6260284045102 50.0636574824213, 35.6270902015802 50.0652199267738, 35.6285899369106 50.066922086797, 35.6288510821654 50.0670912935919, 35.6378342974275 50.0627561477932)))"
      calculated_area = LwGeom::Spheroid.get_area_from_wkt(poly_str)
      assert_in_delta(calculated_area, area, 0.001)

      # from wkb
      #mp.as_binary.unpack("B*")
      #poly_str
      #ActiveRecord::Base.connection.select_one("Select ST_AsBinary(ST_GeometryFromText(ST_AsText('#{mp.as_text}'))) as geom")["geom"]
      # strbin = ActiveRecord::Base.connection.select_one("Select ST_Mem_Size(ST_AsBinary(ST_GeometryFromText(ST_AsText('#{mp.as_text}')))) as geom")["geom"]
   
      poly_str = "\x00\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00&@A\xD1\xA4\x8D\xE3\xDB\xF0@I\b\bd\xB92\x87@A\xD2\fy*\eQ@I\a\xD7\x9B\xA6&\x86@A\xD2j\xDA\x871\xE5@I\a\xB1\x05\x14\x9A\x8A@A\xD2\x83\xAD\xAF\x0E\xCB@I\a\xA3\xB6;\n\x82@A\xD2\x89\xE7\x93\x1A\xD1@I\a\x9C\xA5\x834\x0F@A\xD2\x85=\xD2\x90\x1D@I\a\x94j\xF3Z\xF0@A\xD2w\x1C0\xA4y@I\a\x88\xF7\xF5\"\xE4@A\xD2KJ\xC5\xACO@I\ap\x87\xDA\xD3i@A\xD1\xB0\x1C&^n@I\aWG*\xA1Y@A\xD1\x8E\xD3x#Y@I\aC1\x84\x18\xE0@A\xD1|\xF2\x16\xCA\x06@I\a?\v\xC7G*@A\xD1J\xF5p h@I\a[\x83\xA4\t&@A\xD1J\xF5\xC5\x8A\xE3@I\abU\xF0v\xA7@A\xD1W\x18\x98\xA8\xB3@I\aoJ\xFB\xD7Y@A\xD1U10\xD4s@I\atz\xCC\xEA.@A\xD1*\xF9D\xD9\xEA@I\a\x89\x1A\x14\xCB\x96@A\xD1\"L\xB6\xA1\xBC@I\a\x90G\xD2H\x9B@A\xD1\x146\\\xC2\xD9@I\a\x93\xA1\xF3:\xAB@A\xD1\n\xAE\x11A\xFC@I\a\x9D\x018\xB7|@A\xD0\xFD\x14\xBA\xEC\x0F@I\a\x9E\xEAL\xAE\xAE@A\xD0\xE2\r\x19\x9D\xA5@I\a\xAC\x1A\xCE\x16<@A\xD0\xDC\x91A\x15\x05@I\a\xA8\x04\x9F&\xDE@A\xD0\xD5\xB1\xD9\x17\e@I\a\xA7\xFA-j\xDC@A\xD0\xB7\x10\xC1*\xCE@I\a\xB86\xD1\x95\xBB@A\xD0\xAFo\x00F\xE9@I\a\xB5\xD6\xBDg_@A\xD0\xA8\x06\x04\xE0]@I\a\xAC\b\x82\r^@A\xD0\xA2\x05L\x95s@I\a\xAA\x9As.\xA0@A\xD0C\x19d\xCB\x9B@I\a\xD8\xC1\xCC\x8D\xAE@A\xD0B\x16}\xAB&@I\a\xDEU\xA9\x9F]@A\xD0G\x0E'\xBC\xFF@I\a\xE7u\xD6\x1E\xCE@A\xD0Y\x83\x8D\xAB\xF7@I\a\xF5\xF1M8H@A\xD0iJ\xE9\xE5\x1F@I\b\x06\xA5\xE88\xB6@A\xD0(\v^\x9D\x89@I\b \x85Rf\xD7@A\xD0!\xB2\xE1\xDE\x83@I\b%\xED\xAA\x92\x95@A\xD0D}\xE1\xB6\xEA@I\bY fE?@A\xD0u\xA2\x92\xD0\x18@I\b\x90\xE7'\x16+@A\xD0~17\xFA0@I\b\x96r\x8F\xE9j@A\xD1\xA4\x8D\xE3\xDB\xF0@I\b\bd\xB92\x87"
      calculated_area = LwGeom::Spheroid.get_area_from_wkb(poly_str)
      assert_in_delta(calculated_area, area, 0.001)

      # from hex
      poly_str = "01060000000100000001030000000100000026000000f0dbe38da4d141408732b96408084940511b2a790cd241408626a69bd7074940e53187da6ad241408a9a1405b1074940cb0eafad83d24140820a3bb6a3074940d11a93e789d241400f3483a59c0749401d90d23d85d24140f05af36a9407494079a4301c77d24140e422f5f7880749404facc54a4bd2414069d3da87700749406e5e261cb0d1414059a12a4757074940592378d38ed14140e01884314307494006ca16f27cd141402a47c70b3f074940682070f54ad141402609a4835b074940e38ac5f54ad14140a776f05562074940b3a8981857d1414059d7fb4a6f07494073d4303155d141402eeacc7a74074940ead944f92ad1414096cb141a89074940bca1b64c22d141409b48d24790074940d9c25c3614d14140ab3af3a193074940fc4111ae0ad141407cb738019d0749400fecba14fdd04140aeae4cea9e074940a59d190de2d041403c16ce1aac07494005154191dcd04140de269f04a80749401b17d9b1d5d04140dc6a2dfaa7074940ce2ac110b7d04140bb95d136b8074940e946006fafd041405f67bdd6b50749405de00406a8d041405e0d8208ac07494073954c05a2d04140a02e739aaa0749409bcb641943d04140ae8dccc1d807494026ab7d1642d041405d9fa955de074940ffbc270e47d04140ce1ed675e7074940f7ab8d8359d0414048384df1f50749401fe5e94a69d04140b638e8a506084940899d5e0b28d04140d76652852008494083dee1b221d041409592aaed25084940eab6e17d44d041403f4566205908494018d092a275d041402b1627e79008494030fa37317ed041406ae98f7296084940f0dbe38da4d141408732b96408084940"
      calculated_area = LwGeom::Spheroid.get_area_from_hexwkb(poly_str)
      assert_in_delta(calculated_area, area, 0.001) 
    end

    def test_length
      length = 1361814.5121943124
      
      # from wkt
      line_string = "LINESTRING (30 40, 35 45, 40 50)"
      calculated_length = LwGeom::Spheroid.get_length_from_wkt(line_string)
      assert_in_delta(calculated_length, length, 0.001)

      # from wkb
      line_string = "\x00\x00\x00\x00\x02\x00\x00\x00\x03@>\x00\x00\x00\x00\x00\x00@D\x00\x00\x00\x00\x00\x00@A\x80\x00\x00\x00\x00\x00@F\x80\x00\x00\x00\x00\x00@D\x00\x00\x00\x00\x00\x00@I\x00\x00\x00\x00\x00\x00"
      calculated_length = LwGeom::Spheroid.get_length_from_wkb(line_string)
      assert_in_delta(calculated_length, length, 0.001)

      # from hex
      line_string = "0102000000030000000000000000003e4000000000000044400000000000804140000000000080464000000000000044400000000000004940"
      calculated_length = LwGeom::Spheroid.get_length_from_hexwkb(line_string)
      assert_in_delta(calculated_length, length, 0.001)
    end

    def test_make_valid
      valid_str_wkb = "01060000000200000001030000000100000005000000000000000000F0BF000000000000F0BF000000000000F0BF0000000000000000000000000000000000000000000000000000000000000000000000000000F0BF000000000000F0BF000000000000F0BF01030000000100000005000000000000000000000000000000000000000000000000000000000000000000F03F000000000000F03F000000000000F03F000000000000F03F000000000000000000000000000000000000000000000000"
      invalid_str_wkb = "\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\a\xBF\xF0\x00\x00\x00\x00\x00\x00\xBF\xF0\x00\x00\x00\x00\x00\x00\xBF\xF0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xF0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xF0\x00\x00\x00\x00\x00\x00?\xF0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xF0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xBF\xF0\x00\x00\x00\x00\x00\x00\xBF\xF0\x00\x00\x00\x00\x00\x00\xBF\xF0\x00\x00\x00\x00\x00\x00"
      
      valid_wkb = LwGeom::Spheroid.make_valid(invalid_str_wkb)

      assert_equal(valid_wkb, valid_str_wkb);
    end

  end
end